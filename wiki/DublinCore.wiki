#summary Use of Dublin Core in RDF

Steve Baskauf - TDWG RDF/OWL Best Practices Task Group

* This document is a draft.  Please do not link to it or cite it*

=1. Use of Dublin Core terms in RDF=

==1.1. Background==

===1.1.1. Legacy dc: terms vs. current dcterms: terms===
In 2008, the Dublin Core Metadata Initiative (DCMI) issued a new set of terms under the current DCMI namespace namespace: {{{http://purl.org/dc/terms/}}} (commonly abbreviated as {{{dcterms:}}}) to refine the terms in the Dublin Core legacy namespace: {{{http://purl.org/dc/elements/1.1/}}} (commonly abbreviated {{{dc:}}}).  The issuing of these terms followed the specification of the DCMI Abstract Model (DCAM) in 2007.  The development of the DCAM was in part a response to the development of the RDF Schema (RDFS) which it closely mirrors (see http://dublincore.org/documents/abstract-model/#sect-1).  

===1.1.2. Range and domain assignments for terms in the dcterms: namespace===
When the new terms in the {{{dcterms:}}} namespace were issued, some of them were assigned domain and range properties as described at http://dublincore.org/documents/2008/01/14/domain-range/#sect-3 .  The rationale for this was described in the section "Addition of domains and ranges for existing properties and creation of new properties" in http://dublincore.org/usage/decisions/2008/dcterms-changes/#sect-2 .  To avoid conflicts with existing implementations of terms from the {{{dc:}}} namespace, no domain and range properties were assigned to those terms. 

===1.1.3. Subproperty relationships between terms in the dcterms: and dc: namespaces===
As described in the section "Addition of domains and ranges for existing properties and creation of new properties" in http://dublincore.org/usage/decisions/2008/dcterms-changes/#sect-2 , each of the terms in the {{{dcterms:}}} namespaces which had corresponding terms in the legacy {{{dc:}}} namespace were defined to be subproperties of those legacy terms.  Thus an assertion made in RDF such as 
{{{
uri1  dcterms:date   "2012-02-20"
}}}
implies
{{{
uri1 dc:date  "2012-02-20"
}}}
while the reverse is not true because there is no subproperty relationship in the opposite direction.  

===1.1.4. Notes on terminology of the DCAM and its relationship to RDF===
The DCAM, described at http://dublincore.org/documents/abstract-model/ is illustrated graphically by Fig. 2: 
http://dublincore.org/documents/2007/06/04/abstract-model/description-set-model.jpg
The terms in this diagram are described in the section http://dublincore.org/documents/abstract-model/#sect-7.  Although the DCAM is an abstract model, it was designed considering the structure of RDF and RDFS and is therefore easily translatable to RDF terms as follows.  The DCAM makes use of the term "value" to represent a physical entity, conceptual entity or literal associated with a property.  In RDF terms, a "value" corresponds to a resource.  An RDF object corresponds to a DCAM "value surrogate" which may be of two forms.  If the resource is a literal, the value surrogate is the string that encodes the value as shown in this diagram from section 4.7 of http://dublincore.org/documents/dc-rdf/#sect-4
http://dublincore.org/documents/2008/01/14/dc-rdf/literalfig.png

In the case of resources which are non-literal, the Description Set Model of DCAM (section 2.2) says "A non-literal value surrogate is a value surrogate for a non-literal value, and is made up of zero or one value URI (a URI that identifies the non-literal value associated with the property), zero or one vocabulary encoding scheme URI (a URI that identifies the vocabulary encoding scheme of which the non-literal value is a member), and zero or more value strings. Each value string is a literal which represents the non-literal value."  Thus,the RDF representation of this is more complex than that of a literal value
This is shown in the following figure from section 4.3 of http://dublincore.org/documents/dc-rdf/#sect-4

http://dublincore.org/documents/2008/01/14/dc-rdf/overviewfig.png

From the point of view of the abstract model, a non-literal value (i.e. an object resource) technically includes several features shown in the RDF diagram above beyond the object node of the triple which includes the property URI.  However, since all of these features are optional, one could consider that the essential feature of the value surrogate is the node itself.  Since the value URI is optional, the node may be a blank node.

The value string component of the value surrogate requires further elaboration.  In an RDF representation of DCAM, the value string is the object of a triple using {{{rdf:value}}} as the predicate.  The description of {{{rdf:value}}} at http://www.w3.org/TR/rdf-primer/#rdfvalue notes that {{{rdf:value}}} has no particular meaning other than as a convenience for creating structured values.  However, as the designated means for expressing the value string in the abstract model, DCMI has assigned meaning to {{{rdf:value}}} in the context of the DCAM.  What exactly that meaning is could be a subject of debate.  However, in reading the entirety of the documents related to the history behind the development of the {{{dcterms:}}} terms and the explanation of how the DCAM should be used to describe resources, it appears that the object of the triple containing {{{rdf:value}}} should be a string which would have been used as a surrogate for the resource itself in the pre-DCAM versions of Dublin Core.  This is perhaps best understood through the history of the use of {{{dc:creator}}} as described in section 1.3.4.1. below.  

The name of the term {{{rdf:value}}} should not be misinterpreted to infer that the string literal object of a triple containing {{{rdf:value}}} as the predicate must be the actual "value" of the subject.  In the case of a property/value pair where the property is {{{dcterms:rights}}} which has the range {{{dcterms:RightsStatement}}}, the non-literal value surrogate could have a value string which actually is the "value" of the dcterms:RightsStatement instance itself, since a rights statement can be expressed as a string literal.  However, in the case of a property/value pair where the property is {{{dcterms:creator}}} which has the range {{{dcterms:Agent}}}, the value string cannot be the actual "value" of the {{{dcterms:Agent}}} instance because that agent is a physical person, not a string.  However, from the section "Literal values of properties without Literal ranges" of http://dublincore.org/documents/dc-rdf-notes/#sect-3 , it is clear that DCMI intends for the object of the {{{rdf:value}}} triple to be a literal which is commonly used to stand in for the resource itself in databases where all entities are strings (vs. databases which can include non-information resources represented by URIs).  

The use of {{{rdf:value}}} as an integral component of the RDF implementation of the DCAM model is somewhat problematic because like {{{rdf:Bag}}}, {{{rdf:Seq}}}, and {{{rdf:Alt}}} (components of RDF designed to allow construction of structured "containers"), {{{rdf:value}}} does not seem to be in widespread use.  However, since the DCAM model considers a value string optional and permits the non-literal value surrogate to be itself described by other property/value pairs, the {{{rdf:value}}} triple could simply be replaced by another one containing a predicate which has a well-known meaning, such as {{{foaf:name}}}.  Of course, including the value string would not cause a problem - it would simply be ignored by clients who did not ascribe to it the special meaning imparted to it by DCMI.

Similarly, the vocabulary encoding scheme designation which involves use of the {{{dcam:memberOf}}} predicate and which has a special place in the DCAM may or may not have any special meaning to clients.  DCMI provides URIs for several at http://dublincore.org/documents/dcmi-terms/#H4 , however the lack of defined URIs to use with this predicate might render the use of {{{dcam:memberOf}}} somewhat less useful than predicates such as {{{skos:inScheme}}} which may have broader implementation.  Of course, as with {{{rdf:value}}}, there would be no harm to using {{{dcam:memberOf}}} and having it simply ignored by clients.  

*Note relevant to Audubon Core: the DCAM encoding guidelines http://dublincore.org/documents/abstract-model/#sect-6 specify that particular encoding guidelines do not need to incorporate all aspects of the model, but they should refer to the DCAM and indicate which parts are encoded and which are not.  In particular, they should indicate how non-literal values can be treated as a described resource when they don't have a URI.*

==1.2. Implications of the domain, range, and subproperty declarations of {{{dcterms:}}} terms==
Because of the range declarations of the terms in the {{{dcterms:}}} namespace, those terms should be used carefully in RDF to avoid collisions of {{{rdf:type}}}.  For example, the term {{{dcterms:bibliographicCitation}}} has the range {{{rdfs:Literal}}} (i.e. {{{http://www.w3.org/2000/01/rdf-schema#Literal}}}.  Thus it is expected that the object of a triple using this property as a predicate would be a string literal.  Using this term with a URI reference as the object would assert that the URI was a literal, which would be a logical inconsistency.  

Likewise it is inappropriate to use a term from {{{dcterms:}}} namespace which has a non-literal range in an RDF triple having a literal object.  For example, it would not be appropriate to make the statement 
{{{
uri1  dcterms:creator  "Vincent van Gogh"
}}} 
because {{{dcterms:creator}}} has the range {{{dcterms:Agent}}} not {{{rdfs:Literal}}}.  

The intention behind these range declarations is described at http://dublincore.org/usage/decisions/2010/dcterms-changes/ .  It is clear from this description that use of terms in the {{{dcterms:}}} namespace with value surrogates (_sensu_ DCAM) of the wrong kind (literal vs. non-literal) is considered inappropriate by DCMI.  The suggestion is made that implementers who wish to use terms with the "wrong" kind of value could use the corresponding term in the {{{dc:}}} namespace (unencumbered by a range declaration) or coin their own term.  

==1.3. Guidelines for expressing Dublin Core metadata using RDF==
DCMI provides some explicit guidelines for how to express Dublin Core metadata in RDF at http://dublincore.org/documents/dc-rdf/#sect-4 .  

The notes on the specifications for DCMI metadata in RDF, http://dublincore.org/documents/dc-rdf-notes/#sect-3 , note that "the appropriate range of a term has become reasonably obvious through a decade of implementation practice", although there has been inconsistency in the application of some terms.  The following sections describe Dublin Core terms that form part of existing or proposed TDWG standards according to the ranges defined by DCMI and discuss how they specifically might be represented in RDF.  

===1.3.1. Dublin Core terms having range rdfs:Literal===
http://dublincore.org/documents/2008/01/14/dc-rdf/literalfig.png
The RDF representation of terms having range {{{rdfs:Literal}}} is straightforward.  The Dublin Core property is the predicate and the literal value surrogate is the object.  The literal value surrogate can have an optional XML language attribute ({{{xml:lang}}}), see http://www.ietf.org/rfc/rfc4646.txt ) or RDF datatype (rdf:datatype).  Note: {{{xsd:}}} abbreviates {{{http://www.w3.org/2001/XMLSchema#}}}.  The datatype {{{xsd:int}}} is used in the examples provided in the RDF guide, but there is no guidance as to what other datatype URIs would be appropriate for other terms.  

Two of the terms used by TDWG are subproperties of {{{dcterms:date}}}.  The definition of that terms states that best practice to use encoding scheme such as W3CDTF profile of ISO 8601: http://www.w3.org/TR/NOTE-datetime .  This profile represents a restricted subset of formats allowed in ISO 8601.  The W3CDTF profile does not elaborate on how an adopting standard should specify which of the available options it permits.  As a practical matter, using one of the XML Schema datatypes follows the model given in the DCMI RDF guide.  There are two appropriate datatypes: {{{xsd:date}}}, which represents on-day intervals on the timeline and {{{xsd:dateTime}}} which represents a point on the timeline.  See http://www.w3.org/TR/xmlschema-2/#date and http://www.w3.org/TR/xmlschema-2/#dateTime for the distinction between these two datatypes.  Using {{{xsd:dateTime}}} would permit representing time to any degree of precision desired and in the interest of maximum flexibility might be preferred over {{{xsd:date}}} unless it were important to make the distinction that day-long intervals were intended rather than points in time.

====1.3.2. Some terms in the dcterms: namespace having literal ranges====

Note: the following generic RDF tag contains the namespace declarations necessary to test the examples given here.
{{{
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:dcterms="http://purl.org/dc/terms/"
xmlns:dctype="http://purl.org/dc/dcmitype/"
xmlns:dcam="http://purl.org/dc/dcam/"
xmlns:dwc="http://rs.tdwg.org/dwc/terms/"
xmlns:foaf="http://xmlns.com/foaf/0.1/"
xmlns:bibo="http://purl.org/ontology/bibo/"
xmlns:owl="http://www.w3.org/2002/07/owl#"
xmlns:xsd ="http://www.w3.org/2001/XMLSchema#"
>
(descriptions here)
</rdf:RDF>
}}}

====1.3.2.1. {{{dcterms:available}}} and {{{dcterms:modified}}}====
Both {{{dcterms:available}}} and {{{dcterms:modified}}} are subproperties of {{{dcterms:date}}}.  Therefore, use of {{{xsd:dateTime}}} would be appropriate as a syntax encoding scheme URI (sensu DCAM) used as an RDF datatype URI as shown in the following examples.
{{{
<dctype:StillImage rdf:about="http://bioimages.vanderbilt.edu/baskauf/10849">
     <dcterms:available rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2010-11-28</dcterms:available>
</dctype:StillImage>
}}}

{{{
<foaf:Document rdf:about="http://bioimages.vanderbilt.edu/baskauf/10849.rdf">
     <dcterms:modified rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">2011-08-12T06:32:43</dcterms:modified>
</foaf:Document>
}}}

====1.3.2.2. {{{dcterms:bibliographicCitation}}}====
No guidance is provided for the specific use of this term, so presumably any text string would be acceptable as long as it is unambiguous.  Indicating the XML language attribute would be appropriate, particularly if the article title is presented in multiple languages.  Note: the domain of this term is declared to be dcterms:BibliographicResource, so the object can be inferred to be an instance of this class even if it is not explicitly stated as in the following example.
{{{
<dcterms:BibliographicResource rdf:about="http://dx.doi.org/10.1525/auk.2009.09022">
     <dcterms:bibliographicCitation xml:lang="en">S. Claramunt, et al. 2009. Polyphyly of Campylorhamphus, and Description of a New Genus for C. pucherani (Dendrocolaptinae). The Awk 127(2):430-439.</dcterms:bibliographicCitation>
     <dcterms:bibliographicCitation xml:lang="es">S. Claramunt, et al. 2009. Polifilia de Campylorhamphus y la Descripción de un Nuevo Género para C. pucherani (Dendrocolaptinae). The Awk 127(2):430-439.</dcterms:bibliographicCitation>
</dcterms:BibliographicResource>
}}}

====1.3.2.3. {{{dcterms:title}}}====
There are no domain or range declarations for {{{dcterms:title}}}.  As with {{{dcterms:bibliographicCitation}}}, XML language attributes could be used to provide multiple versions of the title.
{{{
<dctype:StillImage rdf:about="http://bioimages.vanderbilt.edu/baskauf/10849">
     <dcterms:title xml:lang="en">Asimina triloba (Annonaceae) - inflorescence - frontal view of flower</dcterms:title>
     <dcterms:title xml:lang="fr">Asimina triloba (Annonaceae) - inflorescence - vue frontale de la fleur</dcterms:title>
</dctype:StillImage>
}}}

====1.3.2.4. {{{dcterms:identifier}}} ====
The definition of {{{dcterms:identifier}}} is "An unambiguous reference to the resource within a given context."  There is no specified means for describing the context, but the "recommended best practice is to identify the resource by means of a string conforming to a formal identification system."  Thus this would seem to be a situation where using the rdf:datatype attribute might be useful if a URI exists for the formal identification system.  

The identifier term is useful in the situation where a globally unique or well-known identifier which is not a URI exists for the resource.  For example, if UUIDs are used as persistent text identifiers, they can be specified using {{{dcterms:identifier}}} as in the following:
{{{
<rdf:Description rdf:about="urn:lsid:zoobank.org:act:3A9A7F78-C144-4220-B5AD-22BD0C10F0CD">
     <owl:sameAs rdf:resource="http://zoobank.org/urn:lsid:zoobank.org:act:3A9A7F78-C144-4220-B5AD-22BD0C10F0CD"/>
     <dcterms:identifier>3A9A7F78-C144-4220-B5AD-22BD0C10F0CD</dcterms:identifier>
     <rdfs:label>Turanena demirsoyi 2012</rdfs:label>
</rdf:Description>
}}}

In this example, the UUID assigned to the scientific name is the literal value of dcterms:identifier, while the LSID created from the UUID is the primary URI for the subject resource.  In accordance with the TDWG LSID Applicability statement, the HTTP-proxied form of the LSID is declared {{{owl:sameAs}}} the LSID.  

Note that all Darwin Core "ID" properties ({{{institutionID, collectionID, datasetID, occurrenceID, individualID, eventID, locationID, higherGeographyID, geologicalContextID, identificationID, taxonID, scientificNameID, acceptedNameUsageID, parentNameUsageID, originalNameUsageID, nameAccordingToID, namePublishedInID, taxonConceptID, resourceRelationshipID, resourceID, relatedResourceID, measurementID}}} are declared to be subproperties of {{{dcterms:identifier}}}.  Therefore, each of those properties inherit the properties of {{{dcterms:identifier}}}, including the range declaration of {{{rdfs:Literal}}}.  This is an example of the priority over subsumption inference rule: 

if 
{{{
dwc:scientificNameID   rdfs:subClassOf   dcterms:identifier   (A subclass B)
}}}
and 
{{{
dcterms:identifier  rdfs:range  rdfs:Literal  (B relation C)
}}}
then 
{{{
dwc:scientificNameID  rdfs:range  rdfs:Literal  (A relation C)
}}}

 This means that an inconsistency would be created if a statement were made such as 
{{{
<dwc:Taxon rdf:about="http://bioimages.vanderbilt.edu/taxon/28754-gleason1991">
     <dwc:scientificName>Acer pensylvanicum L.</dwc:scientificName>
     <dwc:scientificNameID rdf:resource="http://www.ubio.org/authority/metadata.php?lsid=urn:lsid:ubio.org:namebank:456229"/>
     <dwc:nameAccordingTo>Gleason, Henry A. and Arthur Cronquist, 1991. Manual of Vascular Plants of Northeastern United States and Adjacent Canada. The New York Botanical Garden, Bronx, NY, US.</dwc:scientificName>
     <dwc:nameAccordingToID rdf:resource="urn:isbn:0893273651"/>
</dwc:Taxon>
}}}
where the objects of the ID terms are URIs rather than a literals.  But there would be no prohibition on saying
{{{
<dwc:Taxon rdf:about="http://bioimages.vanderbilt.edu/taxon/28754-gleason1991">
     <dwc:scientificName>Acer pensylvanicum L.</dwc:scientificName>
     <dwc:scientificNameID>http://www.ubio.org/authority/metadata.php?lsid=urn:lsid:ubio.org:namebank:456229</dwc:scientificNameID>
     <dwc:nameAccordingTo>Gleason, Henry A. and Arthur Cronquist, 1991. Manual of Vascular Plants of Northeastern United States and Adjacent Canada. The New York Botanical Garden, Bronx, NY, US.</dwc:scientificName>
     <dwc:nameAccordingToID>urn:isbn:0893273651</dwc:nameAccordingToID>
</dwc:Taxon>
}}}
although the benefit of this might be questionable.

===1.3.3. Dublin Core terms having non-literal ranges===

====1.3.4. Some terms in the dcterms: namespace having non-literal ranges====
The terms listed here are those that have been incorporated into the Darwin Core standard and the Audubon Core draft standard.

====1.3.4.1. {{{dcterms:creator}}} (range: {{{dcterms:Agent}}}====
The use of dcterms:creator has been discussed extensively.  The most straightforward summary and the one which provides the clearest indication of how DCMI intends for the DCAM to apply in RDF is the section entitled "Literal values of properties without Literal ranges" in http://dublincore.org/documents/dc-rdf-notes/#sect-3 .  This approach is an attempt to fix years of confusion involving the use of the {{{dc:creator}}} term.  See http://wiki.foaf-project.org/w/UsingDublinCoreCreator for historical background.  The suggestion that FOAF create a term {{{foaf:maker}}} came to pass, and the point of view discussed in the previous document came to be accepted, namely that {{{foaf:maker}}} have an object which represents the agent itself, while {{{dc:creator}}} could be used for textual names that stand for the creator.  Because the range of the "new" term {{{dcterms:creator}}} is {{{dcterms:Agent}}} rather than {{{rdfs:Literal}}}, it clearly should not be used with textual names.  There is a unique connection between DCMI and FOAF in that in their definitions {{{dcterms:creator}}} and {{{foaf:maker}}} are declared an {{{owl:equivalentProperty}}} relationship between them.  

The section "Literal values of properties without Literal ranges" describes the use in RDF of {{{rdf:value}}} to express the name of the agent and this is consistent with the abstract DCAM's description of the optional value string which "is a literal which represents the non-literal value" of the non-literal value surrogate.  Under this model, one could say
{{{
<bibo:Webpage rdf:about="http://lod.taxonconcept.org/ses/dwAmr.html">
     <dcterms:creator>
          <foaf:Person rdf:about="http://lod.taxonconcept.org/ontology/people.owl#Peter_J_DeVries">
               <rdf:value>Peter J. DeVries</rdf:value>
          </foaf:Person>
     </dcterms:creator>
</bibo:Webpage>
}}}
However, given that {{{rdf:value}}} has no particular meaning other than as a convenience for creating structured values (see http://www.w3.org/TR/rdf-primer/#rdfvalue ), it would seem better to use a more meaningful property like {{{foaf:name}}}, e.g. 
{{{
<bibo:Webpage rdf:about="http://lod.taxonconcept.org/ses/dwAmr.html">
     <dcterms:creator>
          <foaf:Person rdf:about="http://lod.taxonconcept.org/ontology/people.owl#Peter_J_DeVries">
               <foaf:name>Peter J. DeVries</foaf:name>
          </foaf:Person>
     </dcterms:creator>
</bibo:Webpage>
}}}

====1.3.4.2. {{{dcterms:rightsHolder}}} (range: {{{dcterms:Agent}}}====

The use of this term is perhaps the most straightforward.  As with {{{dcterms:creator}}}, the object of the triple could simply be the URI of a FOAF profile.  
{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/kirchoff/em2132">
     <dcterms:rightsHolder rdf:resource="http://bioimages.vanderbilt.edu/contact/kirchoff" />
</rdf:Description>
}}}

====1.3.4.3. {{{dcterms:type}}} (range: {{{rdfs:Class}}})  ====

The recommended best practice for {{{dcterms:type}}} is to use a controlled vocabulary such as the DCMI Type Vocabulary (http://dublincore.org/documents/dcmi-type-vocabulary/).  The DCMI Type Vocabulary terms are defined as instances of rdfs:Class, so using them with {{{dcterms:type}}} is appropriate given the specified range.  The DCMI Type Vocabulary is a Vocabulary Encoding Scheme, so following the recommendation for expressing non-literal value surrogates as demonstrated in the following example:
{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/baskauf/16626">
     <dcterms:type>
          <rdf:Description rdf:about="http://purl.org/dc/dcmitype/StillImage">
               <dcam:memberOf rdf:resource="http://purl.org/dc/terms/DCMIType"/>
          </rdf:Description>
     </dcterms:type>
</rdf:Description>
}}}
However, the {{{dcam:memberOf}}} statement is actually redundant, since the defining RDF for terms in the DCMI Type Vocabulary (dublincore.org/2010/10/11/dctype.rdf) already include the statement {{{<dcam:memberOf rdf:resource="http://purl.org/dc/terms/DCMIType"/>}}} for each term.  

There might be some utility in using a vocabulary encoding scheme URI and value string in cases where a term definition suggests recommended values but does not create URIs to identify them (i.e. necessitating a blank node for the object).  For example, Audubon Core recommends a value of "PanAndZoomImage" for use with {{{dcterms:type}}} but has not (at the present) defined a URI for it.  So one could say
{{{
<rdf:Description rdf:about="http://example.org/coolImage">
     <dcterms:type>
          <rdf:Description>
               <dcam:memberOf rdf:resource="http://rs.tdwg.org/ac/terms"/>
               <rdf:value>PanAndZoomImage</rdf:value>
          </rdf:Description>
     </dcterms:type>
</rdf:Description>
}}}
Whether this is appropriate is debatable and whether any client would be sophisticated enough to understand what it meant is not known.  

====1.3.4.4. {{{dcterms:rights}}} (range: {{{dcterms:RightsStatement}}}) and {{{dcterms:accessRights}}} (range: {{{dcterms:RightsStatement}}}) ====

The definition of dcterms:rights notes that typically "rights information includes a statement about various property rights".  However, since the range of {{{dcterms:rights}}} is a non-literal value, it would not be appropriate to simply provide a text statement as a literal object.  Here would be an option for expressing this property:
{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/kirchoff/em2132">
     <dcterms:rights>
          <dcterms:RightsStatement>
               <dcterms:created>2011</dcterms:created>
               <rdf:value>(c) 2011 Bruce K. Kirchoff</rdf:value>
          </dcterms:RightsStatement>
     </dcterms:rights>
</rdf:Description>
}}}

====1.3.4.5. {{{dcterms:language}}} (range: {{{dcterms:LinguisticSystem}}})

The comment listed in the definition says "Recommended best practice is to use a controlled vocabulary such as RFC 4646."  However, since RFC 4656 has been obsoleted by RFC 5646 it would be best to use that- as a practical matter the tags are not going to differ in most instances.  Given that the range of is {{{dcterms:LinguisticSystem}}} rather than {{{rdfs:literal}}}, it would not be correct to simply provde  a string object which conforms to RFC 5646 in the form of an ISO639-1 (Alpha-2 code) or ISO639-2 (Alpha-3 code) tag which is described at http://tools.ietf.org/html/rfc5646#section-2.2.1 .  

One option would be to provide no value URI (i.e. a blank node).  However, there are a number of web pages on the topic of languages as RDF resources, including http://www.w3.org/wiki/Languages_as_RDF_Resources , http://www.lingvoj.org/ , and http://id.loc.gov/vocabulary/iso639-1.html which suggest URIs that can be used for languages.  What seems to be the most authoritative reference would be Library of Congress URIs of the form
{{{
http://id.loc.gov/vocabulary/iso639-1/en
}}}
(where the last two characters are the ISO 639-1 two-letter language code) or
{{{
http://id.loc.gov/vocabulary/iso639-2/eng
}}}
(where the last three characters are the ISO 639-2 three-letter language code).  These URIs dereference to RDF and HTML depending on the content-type requested.  The RDF metadata returned when the URIs are dereferenced declare a {{{skos:exactMatch }}} relationship between the URIs which correspond to the two and three letter codes, provide a variety of labels identified using various SKOS label properties, and identify the actual ISO 639 string using the {{{skos:notation}}} property.  

A possible way to represent the language property in RDF which would conform to the DCAM model and RDF guidelines might be:
{{{ 
<rdf:Description rdf:about="http://dx.doi.org/10.1525/auk.2009.09022">
     <dcterms:language>
          <dcterms:LinguisticSystem rdf:about="http://id.loc.gov/vocabulary/iso639-1/en">
               <dcam:memberOf rdf:resource= "http://id.loc.gov/vocabulary/iso639-1"/>
               <rdf:value>en</rdf:value>
          </dcterms:LinguisticSystem>
     </dcterms:language>
</rdf:Description>
}}}
In this RDF, I have explicitly declared {{{http://id.loc.gov/vocabulary/iso639-1/en}}} to be a {{{dcterms:LinguisticSystem}}}, although that could be inferred from the range of {{{dcterms:language}}} anyway.  It could be questioned whether {{{http://id.loc.gov/vocabulary/iso639-1/en}}} is actually an instance of a linguistic system or if it represents an instance of a label for linguistic system.  The RDF types {{{http://id.loc.gov/vocabulary/iso639-1/en}}} as "http://www.loc.gov/mads/rdf/v1#Authority" which is "A concept with a controlled label." and as an {{{skos:Concept}}} so it is clearly a concept of something if not a concept of the language English.  I think to some extent this may be a moot point since the URI gets the job done (i.e. identifies the intended language, provides labels for it, and connects equivalent labels).  

Note: http://purl.org/dc/terms/RFC5646 is a syntax encoding scheme, not a vocabulary encoding scheme.

*In the example I gave, I specified the value of {{{dcam:memberOf}}}  to be {{{http://purl.org/dc/terms/RFC5646}}}, a {{{dcam:VocabularyEncodingScheme}}} ("An enumerated set of resources.").  One could argue about whether {{{http://id.loc.gov/vocabulary/iso639-1/en}}} is actually a member of any coding scheme, since it seems to represent the language English, not a code for English.  However, I think this could be said for any resource which is described using the DCAM - it's actually the literal object of {{{rdf:value}}} that is part of the coding scheme, not the actual subject of {{{dcam:memberOf}}}.  This just seems to be the way DCAM works.  It is not that different from {{{http://id.loc.gov/vocabulary/iso639-1}}} which is an instance of both {{{skos:ConceptScheme}}} and {{{http://www.loc.gov/mads/rdf/v1#MADSScheme}}} and of which {{{http://id.loc.gov/vocabulary/iso639-1/en}}} is a member.*  

====1.3.4.6. {{{dcterms:temporal}}} (range: {{{dcterms:PeriodOfTime}}})====
This is a very problematic term, defined as "temporal characteristics of the resource."  The definition of {{{dcterms:PeriodOfTime}}} is "An interval of time that is named or defined by its start and end dates", yet this cannot be expressed as a rdfs:Literal as the object of {{{dcterms:temporal}}} is a non-literal value.  Maybe:
{{{
<dctype:MovingImage rdf:about="http://films.org/gone_with_the_wind">
     <dcterms:temporal>
          <dcterms:PeriodOfTime>
	     <rdf:value>1861/1865</rdf:value>
          </dcterms:PeriodOfTime>
     </dcterms:temporal>
</dctype:MovingImage>
}}}

====1.3.4.7. {{{dcterms:format}}} (range: {{{dcterms:MediaTypeOrExtent}}})====
http://dublincore.org/documents/2007/07/02/domain-range/format-classes.jpg

The property {{{dcterms:format}}} is part of a complex group of property/class relationships defined by Dublin Core.   It has a rather broad definition: "the file format, physical medium, or dimensions of the resource" with the recommended best practice of using "a controlled vocabulary such as the list of Internet Media Types" (i.e. MIME types).  The following example illustrates how a format can be specified in terms of the Internet Media Type.

{{{
<dctype:Text rdf:about="http://example.org/document.html">
     <dcterms:format>
          <dcterms:MediaTypeOrExtent>
               <dcam:VocabularyEncodingScheme rdf:resource="http://purl.org/dc/terms/IMT"/>
               <rdf:value>text/html</rdf:value>
          </dcterms:MediaTypeOrExtent>
     </dcterms:format>
</dctype:Text>
}}}
Note that this introduces a blank node in the absence of a well-recognized URI for media types.  DCMI defines a URI for the Internet Media Type vocabulary encoding scheme but it is not clear how to indicate other format description systems such as file extensions.

====1.3.4.8. {{{dcterms:extent}}} (range: {{{dcterms:SizeOrDuration}}}====

{{{dcterms:extent}}} is defined as "the size or duration of the resource."  Little guidance is given about how to specify the units or encoding scheme.  

{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/baskauf/04005#tn">
     <dcterms:extent>
          <dcterms:SizeOrDuration>
               <rdf:value>70 x 100 px</rdf:value>
          </dcterms:SizeOrDuration>
     </dcterms:extent>
</rdf:Description>
}}}

Note: {{{dcterms:extent}}} is a subproperty of {{{dcterms:format}}} while {{{dcterms:SizeOrDuration}}} is a subclass of {{{dcterms:MediaTypeOrExtent}}}.  So the description above also would imply the following:

{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/baskauf/04005#tn">
     <dcterms:format>
          <dcterms:MediaTypeOrExtent>
               <rdf:value>70 x 100 px</rdf:value>
          </dcterms:MediaTypeOrExtent>
     </dcterms:format>
</rdf:Description>
}}}

There seems to be little value in creating this level of complexity, especially when no one is likely to coin URIs for each possible value of type or extent.  The strategy of utilizing terms with specific kinds of literal objects seems more beneficial for RDF, e.g. 
{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/baskauf/04005#tn">
     <mix:imageWidth>70</mix:imageWidth>
     <mix:imageHeight>100</mix:imageHeight>
</rdf:Description>
}}}
where the properties are defined to refer to number of pixels.  

===1.3.5. Alternative involving use of terms in the {{{dc:}}} namespace===
If one preferred to use literal value surrogates the corresponding terms in the {{{dc:}}} namespace could be used.  For example:
{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/kirchoff/em2132">
     <dc:rights>(c) 2011 Bruce K. Kirchoff</dc:rights>
     <dc:type>StillImage</dc:type>
</rdf:Description>
}}}
Because the {{{dc:}}} terms have no defined ranges, this does not create any inconsistencies.  Since there is no corresponding {{{dc:}}} term for {{{dcterms:rightsHolder}}}, one cannot create a triple using that property with a literal object.  Whether clients would be able to interpret these statements more easily than the examples in section 1.3.4. or not is unknown.  It should be noted that Audubon Core explicitly states that {{{dcterms:rights}}} should be a "full-text, readable copyright statement" which seem to be in conflict with the DCMI guidelines for RDF.

It is also possible to provide descriptions of a resource using both literal and non-literal versions of a term:
{{{
<rdf:Description rdf:about="http://bioimages.vanderbilt.edu/kirchoff/em2132">
     <rdf:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
     <dc:rights>(c) 2011 Bruce K. Kirchoff</dc:rights>
     <dcterms:rights>
          <dcterms:RightsStatement>
               <dcterms:created>2011</dcterms:created>
               <rdf:value>(c) 2011 Bruce K. Kirchoff</rdf:value>
          </dcterms:RightsStatement>
     </dcterms:rights>
     <dc:type>StillImage</dc:type>
     <dcterms:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
</rdf:Description>
}}}
Since the Dublin Core type vocabulary is well known, there might be some advantage to using {{{dctype:StillImage}}} as the non-literal object of {{{dcterms:type}}} rather than simply providing a text literal object of {{{dc:type}}}.  However, it seems questionable as to whether there is a benefit to providing a non-literal object to {{{dcterms:rights}}} when that object is not identified by a URI (i.e. a blank node) and is therefore not likely to be reused or referenced by others.  Unless there is a need to describe the conceptual entity using other properties (e.g. to indicate creation date, authorship, etc.) there seems to be little benefit over simply relaying the information in the form of a literal.

====1.3.6. {{{dc:}}} counterparts for Dublin Core terms used in the TDWG community ===
The following terms in the {{{dcterms:}}} namespace have  superproperties in the {{{dc:}}} namespace and could therefore be expressed as literals without "breaking" anything: {{{creator}}}, {{{type}}}, {{{ rights}}}, {{{language}}}, and {{{format}}}.

The following terms in the {{{dcterms:}}} do not have counterparts in the {{{dc:}}}namespace:  {{{rightsHolder}}}, {{{accessRights}}}, {{{temporal}}}, and {{{extent}}}.
Using them with a literal would introduce an inconsistency due to their range declarations.

===1.3.7. Dublin Core terms having no declared range===
There are a number of terms in the in the {{{dcterms:}}} namespace which do not have a declared range, but whose metadata notes "This term is intended to be used with non-literal values as defined in the DCMI Abstract Model (http://dublincore.org/documents/abstract-model/).  As of December 2007, the DCMI Usage Board is seeking a way to express this intention with a formal range declaration."  As of February 2012, these terms still do not have formal {{{rdfs:range}}} declarations.  So it would not formally introduce any inconsistencies to use them with literal values, but to be consistent with the expressed intent of DCMI, it would seem to be a best practice to use them with non-literal objects and to use the corresponding terms in the {{{dc:}}} namespace (if available) for literal objects.

====1.3.8. Some terms in the {{{dcterms:}}} namespace having no declared range====

====1.3.8.1. {{{dcterms:references}}} ====
This term is defined as "a related resource that is referenced, cited, or otherwise pointed to by the described resource."  It is also declared to be a subproperty of {{{dcterms:relation}}}.  It has no corresponding term in the {{{dc:}}} namespace, so there is no appropriate way to use a literal with this term.  {{{dcterms:references}}} is a subproperty of {{{dc:relation}}} which could have a literal object.  So it would be possible to use {{{dc:relation}}} as a substitute for which a literal value would be appropriate.  However, {{{dc:relation}}} does not indication the direction of the relationship and its use would therefore make it difficult to distinguish the type of relationship from {{{dcterms:isReferencedBy}}} which is apparently (but not declared to be) an inverse property of {{{dcterms:references}}}, and which is also a subproperty of {{{dc:relation}}}.

====1.3.8.2.  {{{dcterms:source}}}====
This term is defined as "a related resource from which the described resource is derived."  It is also declared to be a subproperty of {{{dcterms:relation}}}.  In this case, the term {{{dc:source}}} could be used of the user preferred to use a literal value rather than a non-literal value.  

====1.3.8.3. {{{dcterms:description}}} ====
The lack of range declaration and the comment that it may include "a free-text account of the resource" indicates that it could be appropriate to use this term with a literal value.  However, since it is possible that some users might want to link to a description which is a separate resource under its own URI, it might be a better practice to reserve {{{dcterms:description}}} for use with non-literal objects and to use {{{dc:description}}} for use with literal objects.
